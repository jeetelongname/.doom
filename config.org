#+TITLE: My configuration
#+STARTUP: content
* Introduction
This is my literate configuration for doom emacs. I barley know [[https://learnxinyminutes.com/docs/elisp/][elisp]]  and I have
mostly stolen snippets from others. This config is [[elisp:(call-interactively #'count-words)][this many]] words, lines and
characters long. Its a lot of blood sweat and tears so I hope you like it as much
as I tolerate it!

Lets get this config started!
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

** Table of Contents :TOC_3:
- [[#introduction][Introduction]]
- [[#rudimentary-configuration][Rudimentary configuration]]
  - [[#quick-fixes][Quick fixes]]
  - [[#keybinds][Keybinds]]
  - [[#hooky-hooks][Hooky hooks]]
  - [[#funky-functions][funky functions]]
- [[#packages][Packages]]
  - [[#hugo-support][Hugo support]]
  - [[#discord-rich-presence][discord rich presence]]
  - [[#dired-previews-peep-dired][dired previews (peep-dired)]]
  - [[#tldr-integration][tldr integration]]
  - [[#selectric-mode][selectric-mode]]
  - [[#evil-tutor][Evil tutor]]
  - [[#emacs-application-framework][emacs application framework]]
  - [[#atomic-chrome][atomic chrome]]
  - [[#themes][themes]]
  - [[#modeline-fun][modeline fun]]
  - [[#vim][vim]]
  - [[#pretty-code-shots][pretty code shots]]
  - [[#keycast][keycast]]
  - [[#games][Games]]
  - [[#dired-drag-and-drop][dired drag and drop]]
  - [[#org-super-agenda][org super agenda]]
  - [[#elfeed-goodies][elfeed-goodies]]
  - [[#sidebars][Sidebars]]
    - [[#org-sidebar][Org Sidebar]]
    - [[#dired-sidebar][Dired sidebar]]
    - [[#ibuffer-sidebar][Ibuffer sidebar]]
  - [[#snow][snow]]
- [[#modules][Modules]]
  - [[#completion][completion]]
    - [[#company][company]]
    - [[#ivy][ivy]]
  - [[#ui][ui]]
    - [[#doom][Doom]]
    - [[#doom-dashboard][Doom Dashboard]]
    - [[#modeline][Modeline]]
    - [[#fixme-popup][FIXME Popup]]
    - [[#deprecated-tabs][DEPRECATED Tabs]]
    - [[#treemacs][Treemacs]]
  - [[#tools][tools]]
    - [[#debugger][debugger]]
  - [[#emacs][emacs]]
    - [[#dired][dired]]
  - [[#lang][lang]]
    - [[#org][Org]]
    - [[#go][Go]]
    - [[#python][Python]]
    - [[#latex][LaTeX]]
  - [[#email][email]]
    - [[#mu4e][mu4e]]
  - [[#app][App]]
    - [[#irc][irc]]
    - [[#rss][rss]]
- [[#epilogue][Epilogue]]

* Rudimentary configuration
This is the stuff that does not really belong in any module but is useful
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jeetaditya Chatterjee"
      user-mail-address "jeetelongname@gmail.com"
      doom-scratch-initial-major-mode 'lisp-interaction-mode
      auth-sources '("~/.authinfo.gpg")
      ispell-dictionary "en"
      display-line-numbers-type 'relative
      browse-url-browser-function 'browse-url-firefox)
#+END_SRC
if a file has changed on disk I dont want that old file sticking around. that
can mess me up
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

Frankly I don't know why this is not default
(it automatically switches to a split)
#+BEGIN_SRC emacs-lisp
(setq evil-split-window-below  t
      evil-vsplit-window-right t)
#+END_SRC

I like a little separation so I put an empty line at the top of my emacs
instance (I may put something in it later)
#+BEGIN_SRC emacs-lisp
(setq-default header-line-format
        (concat (propertize " " 'display '((space :align-to 0)))
                " "))
#+END_SRC
spawn emacs somewhat in the center of my screen
#+BEGIN_SRC emacs-lisp
(let ((width  500)
      (height 250)
      (display-height (display-pixel-height))
      (display-width  (display-pixel-width)))
  (pushnew! initial-frame-alist
            `(left . ,(- (/ display-width 2) (/ width 2)))
            `(top . ,(- (/ display-height 2) (/ height 2)))
            `(width text-pixels ,width)
            `(height text-pixels ,height)))
#+END_SRC
** Quick fixes

** Keybinds
These are my general keybinds they should not belong to any module. thus they
get stuck here
#+BEGIN_SRC emacs-lisp
(map!
 :n "z C-w" 'save-buffer ; I can use this onehanded which is nice when I need to leave or eat or something
 :leader
 :desc "Enable Coloured Values""t c" #'rainbow-mode
 :desc "Toggle Tabs""t B" #'centaur-tabs-local-mode
 :desc "Open Elfeed""o l" #'elfeed


 (:after spell-fu (:map override ;; HACK spell-fu does not define a modemap
                   :n [return]
                   (cmds! (memq 'spell-fu-incorrect-face (face-at-point nil t))
                          #'+spell/correct))))
#+END_SRC

** Hooky hooks
#+begin_src emacs-lisp
(add-hook! 'rainbow-mode-hook
  (hl-line-mode (if rainbow-mode -1 +1)))
;; this snippet can be replaced with `(after! magit (setq magit-save-repository-buffers t))'
;; (after! magit (add-hook! 'magit-status-mode-hook :append (call-interactively #'save-some-buffers)))
#+end_src

#+BEGIN_SRC emacs-lisp
(remove-hook 'text-mode-hook #'visual-line-mode)
(add-hook 'text-mode-hook #'auto-fill-mode)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC
** funky functions
Because this is a literate config I can't re evaluate the buffer using
~eval-buffer~ (bound to =SPC m e b=) so I reload the file
(=m e b= becomes =h r c=)
#+BEGIN_SRC emacs-lisp
(defun yeet/reload ()
  "A simple cmd to make reloading m config easier"
  (interactive)
  (load! "config" doom-private-dir)
  (message "Reloaded!"))

(map! :leader
      "h r c" #'yeet/reload)
#+END_SRC

This was the begining of a paint intergration so that I could draw-in notes. I
could not find a program featurefull yet commandline enough to get it working, but
one day
#+BEGIN_SRC emacs-lisp
(defvar yeet/paint-insert-prefix-dir (concat org-directory "pictures")
  "where to put the picture")
(defvar yeet/paint-ask t
  "Ask if you want to name the file if no it will be named you current buffer + picture")
(defvar yeet/paint-cmd "gnome-paint"
  "the program you want to use as your paint program")

(defun yeet/paint-insert()
  ""
  (interactive)
  (shell-command yeet/paint-cmd))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(defun henlo ()
  "henlo."
  (interactive)
  (message "\"henlo\""))
(henlo)
#+END_SRC

I don't have a problem ok I can =M-x stop= at any time
#+begin_src emacs-lisp
(defun stop ()
  (interactive)
  (defvar name "*I can quit at any time*")
  (switch-to-buffer (get-buffer-create name))
  (insert "I can stop at any time\nI am in control"))
#+end_src


This snippet toggles between a vertical and horizontal window. Like most things
I did not write this I took it from [[https://www.emacswiki.org/emacs/ToggleWindowSplit][here]]
#+begin_src emacs-lisp
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))
#+end_src

* Packages
I have quite a few packages that I use. These are the packages and there
subsequent configurations
A nice little header
#+BEGIN_SRC emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+END_SRC
** Hugo support
This is mostly just for the time stamp but it does come in handy
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! emacs-easy-hugo
  :recipe (:host github
           :repo "masasam/emacs-easy-hugo"
           :files ("*el")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (setq easy-hugo-basedir "~/code/git-repos/mine/jeetelongname.github.io/blog-hugo/")
(use-package! emacs-easy-hugo
  :after markdown
  :config
  (setq easy-hugo-root "~/code/git-repos/mine/jeetelongname.github.io/blog-hugo/"))
#+END_SRC
** discord rich presence
I use discord emacs over elcord .. well because I found it first this is pretty
much all that is needed for it to work and you can use the default client id to
get it working right away or if you want to roll your own .you can add assets by
calling them the file extension (go for golang py for python org for .. well you
know)

#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! discord-emacs
  :recipe (:host github
           :repo "nitros12/discord-emacs.el"
           :files ("*.el")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package! discord-emacs ;; for face value discord intergration
  :config
  ;; (discord-emacs-run "747913611426529440") ;;mine
  (discord-emacs-run "384815451978334208")) ;;default
#+END_SRC
** TODO dired previews (peep-dired)
this is meant to give me a preview of the file in dired (or a peep). at the
moment it slows me down so its defered for the time being
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! peep-dired)
#+END_SRC

#+begin_src emacs-lisp
(use-package! peep-dired
  ;; :after dired
  :defer t
  :config
  (setq peep-dired-cleanup-on-disable t)
  (map! (:after dired (:map dired-mode-map
                       :n "j" #'peep-dired-next-file
                       :n "k" #'peep-dired-prev-file
                       :localleader
                       "p" #'peep-dired))))
#+end_src

** tldr integration
Ever wanted to.. not read a man page? me too. tldr is a good middle ground between
a lot of useless information and .. no information. Now in emacs!
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! tldr)
#+END_SRC

#+begin_src emacs-lisp
(use-package! tldr
  :config
  (setq tldr-directory-path (expand-file-name "tldr/" doom-etc-dir))
  (setq tldr-enabled-categories '("common" "linux")))
#+end_src
** selectric-mode
I want to annoy people with a loud keyboard without having to carry around a
loud keyboard
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! selectric-mode)
#+END_SRC
** Evil tutor
I wanted to see the differences with its vim counterparts
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! evil-tutor)
#+END_SRC
** emacs application framework
eaf is an application framework for writing pyqt applications in emacs. Its
really cool!
https://github.com/MatthewZMD/.emacs.d#orgad36696 this is a config I need to revisit
You need a few dependencies for this to work. I don't recommend installing from
pip as it can be buggy

#+begin_src shell :tangle no
sudo apt-get install python3-pyqt5.qtwebengine python3-pyqt5.qtmultimedia
#+end_src

#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! eaf :recipe
  (:host github
   :repo "manateelazycat/emacs-application-framework"
   :files ("*.el" "*.py" "core" "app")
   :no-byte-compile t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package! eaf
  :defer t
  :config
  ;; (setq eaf-enable-debug t) ; should only be used when eaf is wigging out
  (eaf-setq eaf-browser-dark-mode "false") ; dark mode is overrated
  (setq eaf-browser-default-search-engine "duckduckgo")
  (eaf-setq eaf-browse-blank-page-url "https://duckduckgo.com"))

(use-package! eaf-evil ;; evil bindings in my browser
  :after eaf
  :config
  (setq eaf-evil-leader-keymap doom-leader-map)
  (setq eaf-evil-leader-key "SPC"))
#+END_SRC
** atomic chrome
#+begin_src emacs-lisp :tangle packages.el
(package! atomic-chrome)
#+end_src
When writing a lot of markdown on github this helps (now all I need to do is get the
button on a keybind in my browser)
#+begin_src emacs-lisp
(use-package! atomic-chrome
  :after-call focus-out-hook
  :config
  (setq atomic-chrome-buffer-open-style 'frame
        atomic-chrome-default-major-mode 'markdown-mode
        atomic-chrome-url-major-mode-alist
        '(("github.\\.com" . gfm-mode)
          ("reddit\\.com" . fundamental-mode)))

  (atomic-chrome-start-server))
#+end_src
** themes
this was for a terminal  experiment that did not work
#+begin_src emacs-lisp :tangle packages.el
(package! horizon-theme)
(unpin! doom-themes)
#+end_src
** modeline fun
/whats life without a little colour?/
#+begin_src emacs-lisp :tangle packages.el
(package! nyan-mode)
(package! parrot)
#+end_src

#+begin_src emacs-lisp
(use-package! nyan-mode
  :defer t
  :config
  (setq nyan-bar-length 20
        nyan-wavy-trail t))

(use-package! parrot
  :defer t
  :config
  (parrot-set-parrot-type 'rotating))
;; (defvar birds '('default 'confused 'emacs 'nyan 'rotating 'science 'thumbsup)) ; FIXME
;; (parrot-set-parrot-type (nth (random (length birds)) birds)))


(after! doom-modeline
  (nyan-mode)
  (nyan-start-animation)
  (parrot-mode)
  (parrot-start-animation))
#+end_src

** vim
because sacrilege is fun
(this is mostly a mental exercise but it does work...) I can (alleged) also get lsp
support as well so this may be a fun project to take on
#+begin_src emacs-lisp :tangle packages.el
(package! vimrc-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! vimrc-mode
  :mode "\\.vim\\'"
  :config
  (sp-with-modes 'vimrc-mode
    (sp-local-pair "\"" :action nil)))
#+end_src

** pretty code shots
I missed the ability to make pretty code shots inside vscode now its come back to
me through this package. its pretty cool and works well (it only does one thing)
#+begin_src emacs-lisp :tangle packages.el
(package! carbon-now-sh)
#+end_src

I wanted to work with these code images directly in emacs so I brought in eaf to
help. Do note that there is a bug in the pypi version of the qtwebengine that
basically segfaults if you open carbon (and probably other sites) if you install
from the repos tho this problem goes away
#+begin_src emacs-lisp
(use-package! carbon-now-sh
  :config
  (defun yeet/carbon-use-eaf ()
    (interactive)
    (split-window-right)
    (let ((browse-url-browser-function 'eaf-open-browser))
      (browse-url (concat carbon-now-sh-baseurl "?code="
                          (url-hexify-string (carbon-now-sh--region))))))
  (map! :n "g C-c" #'yeet/carbon-use-eaf))
#+end_src

** TODO keycast
I have stolen this from @tecosaur again..
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! keycast)
#+END_SRC
it adds prettier keycast mode support and more stuff that I don't understand. I
also bound it
#+BEGIN_SRC emacs-lisp
(use-package! keycast
  :commands keycast-mode
  :after doom-modeline
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
        (progn
          (add-hook 'pre-command-hook 'keycast-mode-line-update t)
          (add-to-list 'global-mode-string '("" mode-line-keycast " ")))
      (remove-hook 'pre-command-hook 'keycast-mode-line-update)
      (setq global-mode-string (remove '("" mode-line-keycast " ") global-mode-string))))
  (custom-set-faces!
    '(keycast-command :inherit doom-modeline-debug
                      :height 0.9)
    '(keycast-key :inherit custom-modified
                  :height 1.1
                  :weight bold))
  (map! :leader "tk" #'keycast-mode))
#+END_SRC
** Games
I want to make a module full of fun games and additins to eastr eggs. its there
to document what exists and just add a little more fun to the operating system
we call home
Some games I will probably add
 - https://web.archive.org/web/20070708044037/http://cedet.sourceforge.net/ftp/hangman.el-0.1.gz
 - https://www.emacswiki.org/emacs/CategoryGames
#+begin_src emacs-lisp :tangle packages.el
;; (package! emacs-2048
;;   :recipe (:host github
;;            :repo "sprang/emacs-2048"))

#+end_src
** dired drag and drop
I want drag and drop so I just wrapped dragon in elisp the drag commands work
wellish
#+begin_src emacs-lisp :tangle packages.el
;; (package! dired-dragon :recipe (:local-repo "~/code/elisp/dired-dragon"))
(package! dired-dragon :recipe (:host github :repo "jeetelongname/dired-dragon"))
#+end_src
#+begin_src emacs-lisp
(use-package! dired-dragon
  :after dired
  :config
  (map! :map dired-mode-map
        (:prefix "C-s"
         :n "d" #'dired-dragon
         :n "s" #'dired-dragon-stay
         :n "i" #'dired-dragon-individual)))
#+end_src

** org super agenda
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! origami)
;; (package! org-super-agenda)
#+END_SRC

** elfeed-goodies
I needed elfeed to look a little nicer. so I got elfeed goodies which did the job
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! elfeed-goodies)
(package! elfeed-web)
#+END_SRC
** TODO Sidebars
By vertue of these things I seem to have 3 different sidebars (4 if you include
treemacs) that I have taken a liking to so they get there own sub genre

*** Org Sidebar
this does a bunch of org stuff like break stuff down into headings. there is a
bit of work to be done
#+begin_src emacs-lisp :tangle packages.el
(package! org-sidebar)
#+end_src

#+begin_src emacs-lisp
(use-package! org-sidebar
  :after org)
#+end_src

*** Dired sidebar
this is a replacement for treemacs. Now don't get me wrong. I like treemacs. Its
great but its /not dired/ this preserves a lot of the dired configuration I
could do and more importantly preserves keys which is nice
#+begin_src emacs-lisp :tangle packages.el
(package! dired-sidebar)
#+end_src
#+begin_src emacs-lisp
(use-package dired-sidebar
  :defer t)
#+end_src

*** Ibuffer sidebar
this is the same thing as above made by the same [[https://github.com/jojojames][author]] and it works just like
dired sidebar.. for Ibuffer
#+begin_src emacs-lisp :tangle packages.el
(package! ibuffer-sidebar)
#+end_src

#+begin_src emacs-lisp
(use-package! ibuffer-sidebar
  :defer t)
#+end_src
** snow
#+begin_src emacs-lisp :tangle packages.el
(package! snow)
#+end_src

#+begin_src emacs-lisp
(use-package! snow
  :config
  (set-popup-rule! "^\\*snow\\*$" :ignore t :modeline nil)) ;; FIXME does not work
#+end_src

* Modules
These are the configurations for the doom specific modules. some are big like
mu4e, some are small like dired. some are well sized. They are all loved tho!
** completion
*** company
#+BEGIN_SRC emacs-lisp
(after! company
  (setq company-idle-delay 0.7 ; I like my autocomplete like my tea fast not oftern but still there
        ;; company-minimum-prefix-length 2
        company-show-numbers t))
#+END_SRC
*** ivy
#+BEGIN_SRC emacs-lisp
(after! ivy
  (setq ivy-height 20
        ivy-wrap nil
        ivy-magic-slash-non-match-action t)
  (add-to-list 'ivy-re-builders-alist '(counsel-projectile-find-file . ivy--regex-plus)))
#+END_SRC

this is to make prescient a little more intelligent
#+BEGIN_SRC emacs-lisp
(setq-default history-length 10000)
(setq-default prescient-history-length 10000)
#+END_SRC

** ui
*** Doom
This is the main module to say what Doom looks like! I put all of my font
settings and all of that fun stuff here

Inconsolata is the best font that I have used... but it does not italic well.
if you do know of a better way. do get in touch!

#+BEGIN_SRC emacs-lisp
(setq! doom-font
       (font-spec :family "Inconsolata NF" :size 15)
       doom-big-font
       (font-spec :family "Inconsolata NF" :size 25))
;; doom-variable-pitch-font
;; (font-spec :family "Inconsolata NF" :size 15))
#+end_src

the comments for horizon are borderline unreadable so now we have brighter
comments
#+begin_src emacs-lisp
(after! doom-themes
  (setq! doom-themes-enable-bold t
         doom-themes-enable-italic t
         doom-horizon-brighter-comments t))
#+end_src

I wanted my comments and keywords to be italics. I may need to change fonts..
#+begin_src  emacs-lisp
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC

My theme
this will load up 2 different themes one for the terminal and one for the gui.
turns out that the emacs client works differently so this is not something that
I can use...
#+BEGIN_SRC emacs-lisp
(if (not (daemonp))
    (if (not (display-graphic-p))
        (setq doom-theme 'horizon)
      (setq doom-theme 'doom-horizon))
  (setq doom-theme 'doom-horizon))
#+end_src

*** Doom Dashboard

now this is my fancy splash image I need to move over to
#+BEGIN_SRC emacs-lisp
(setq fancy-splash-image (concat doom-private-dir "icons/emacs-icon.png"))
#+END_SRC

I am starting to experimenting with adding stuff to the dashboard
#+begin_src emacs-lisp
(add-hook! '+doom-dashboard-functions :append
  (insert "\n" (+doom-dashboard--center +doom-dashboard--width "Get back to work")))
#+end_src

*** Modeline
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq doom-modeline-buffer-file-name-style 'auto
        doom-modeline-height 30
        doom-modeline-icon 't
        doom-modeline-modal-icon 'nil
        doom-modeline-env-version t
        doom-modeline-buffer-modification-icon t
        doom-modeline-enable-word-count t
        doom-modeline-continuous-word-count-modes '(text-mode)
        doom-modeline-icon (display-graphic-p)
        doom-modeline-persp-name t
        doom-modeline-persp-icon t
        doom-modeline-github t
        doom-modeline-mu4e t))
#+END_SRC
This was all for a little padding. I could remove the stuff I don't need but
whats the fun in that?

#+begin_src emacs-lisp
(after! doom-modeline
  (doom-modeline-def-modeline 'main
    '(bar workspace-name window-number modals matches buffer-info remote-host buffer-position word-count parrot selection-info)
    '(objed-state misc-info persp-name grip irc mu4e github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process checker vcs "  " bar)))
#+end_src

I stole this from @tecosaur Its frankly a great addition (this is a theme
throughout @tecosaurs config)
As we expect that the encoding is UTF-8 we remove it from the modeline untill we
get something that is not normal
#+BEGIN_SRC emacs-lisp

(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook! 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)

#+END_SRC

the persp name was too dark for my liking
#+begin_src emacs-lisp
(custom-set-faces! '(doom-modeline-persp-name :foreground "#e95678" :weight bold ))
#+end_src
*** FIXME Popup
this is my default pop up rule, all my popups are beaten into submission
#+BEGIN_SRC emacs-lisp
;; (set-popup-rule! ".+"
;;   :side 'right
;;   :width 90
;;   :actions '+popup-display-buffer-stacked-side-window-fn
;;   :quit t)
;; (set-popup-rule! "COMMIT_EDITMSG"
;;   :side 'top
;;   :height 20)
#+END_SRC

*** DEPRECATED Tabs
I don't use tabs so a lot of this is not really maintained...
#+BEGIN_SRC emacs-lisp
(when (featurep! :ui tabs)
  (after! centaur-tabs
    (setq centaur-tabs-style "box"
          centaur-tabs-height 32
          centaur-tabs-set-bar 'under
          x-underline-at-descent-line t
          centaur-tabs-close-button "×"
          centaur-tabs-modified-marker "Ø")))
#+END_SRC
*** Treemacs
this provides a vscode like sidebar. I actually use dired a lot more but I guess
its still useful for presentation's
#+BEGIN_SRC emacs-lisp
(after! treemacs
  (setq +treemacs-git-mode 'extended
        treemacs-width 25))
#+END_SRC
** tools
*** TODO debugger
dap support in doom is meh so I a have added a little more. tbh I don't really
use a debugger (tho I should) its a little broken and go support seems to be
out so I will have to fix that eventually
#+begin_src emacs-lisp
(after! dap-mode
  (setq dap-auto-configure-features '(sessions locals controls tooltip)
        dap-python-executable "python3"))
#+end_src

this does a thing
#+begin_src emacs-lisp
(add-hook 'dap-stopped-hook
          (lambda (arg) (call-interactively #'dap-hydra)))
#+end_src
#+begin_src emacs-lisp
(map! :leader "od" nil
      :leader "od" #'dap-debug
      :leader "dt" #'dap-breakpoint-toggle)
#+end_src
** emacs
*** dired
If I open 2 instances of dired in two different locations then move one. dired
will point the move to the other location
#+begin_src emacs-lisp
(setq dired-dwim-target t)
#+end_src

** lang
*** TODO Org
Org mode. our favorite plain text markup format! these are my configurations for
it
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-directory "~/org-notes/"
        org-agenda-files (list org-directory))
  (when (featurep! :lang org +pretty) ;; I used to use the +pretty flag but I now don't thus the `when'
    (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕")
          org-superstar-headline-bullets-list '("⁕" "܅" "⁖" "⁘" "⁙" "⁜"))))
#+end_src

As org has a lot of subheading's I wanted to tweak stuff ever so slightly thus
here we are. do note that I have copied all of the foreground info over that
becuse the ~inherit~ value (setter?, key? idk) did not exist untill I looked it
up it would have looked like ~..:inherit outline-x~ where x is the level of the
heading you want to change. This just locks me into the horizon colour scheme
but there are worst things. The better way would be to change ~outline-x~
directly
#+begin_src emacs-lisp
(custom-set-faces!
  '(org-date :foreground "#5b6268")
  '(org-document-title :height 1.75 :weight bold)
  '(org-level-1 :foreground "#21bfc2" :height 1.3 :weight normal)
  '(org-level-2 :foreground "#6c6f93" :height 1.1 :weight normal)
  '(org-level-3 :foreground "#b877db" :height 1.0 :weight normal)
  '(org-level-4 :foreground "#58cfd1":height 1.0 :weight normal)
  '(org-level-5 :foreground "#9093ae":weight normal)
  '(org-level-6 :foreground "#90dfe0":weight normal))
  #+END_SRC


#+BEGIN_SRC emacs-lisp
(after! org-capture
    (setq org-capture-templates
      '(("x" "Note" entry (file+olp+datetree "journal.org") "**** %T %?" :prepend t :kill-buffer t)
        ("t" "Task" entry (file+headline "tasks.org" "Inbox") "**** TODO %U %?\n%i" :prepend t :kill-buffer t)
        ("b" "Blog" entry (file+headline "blog-ideas.org" "Ideas") "**** TODO  %?\n%i" :prepend t :kill-buffer t)
        ("U" "UTCR" entry (file+headline "UTCR-TODO.org" "Tasks") "**** TODO %?\n%i" :prepend t :kill-buffer t))))
#+END_SRC

*** Go
Go and lsp have not been behaving like they should. the file watchers have been
misbehaving and now they have been disabled for go mode. That fixes the issue
but means lsp will not watch files in the workspace (a small price to pay imo)
#+BEGIN_SRC emacs-lisp
(after! go-mode ;; I have stopped using ligatures so this is not useful to me but it can be to you!
  (set-ligatures! 'go-mode
                  :def "func"
                  :true "true" :false "false"
                  :int "int" :str "string"
                  :float "float" :bool "bool"
                  :for "for"
                  :return "return" )
  )
(setq-hook! 'go-mode-hook
  lsp-enable-file-watchers nil)
#+END_SRC
*** Python
Python is great is it not 🐍
#+BEGIN_SRC emacs-lisp
(setq! +python-ipython-command '("ipython3" "-i" "--simple-prompt" "--no-color-info"))
(set-repl-handler! 'python-mode #'+python/open-ipython-repl)
#+END_SRC

*** LaTeX
turns out doom has support for latexmk already
#+BEGIN_SRC emacs-lisp
(setq +latex-viewers '(pdf-tools))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(map! :map cdlatex-mode-map
      :i "TAB" #'cdlatex-tab)
#+END_SRC

** email
*** mu4e
Whats better than email? email in emacs! mu4e has been fine for me so I dont
think I will

Setting my email using ~set-email-acount~. its a simple affair If you are stuck
on the folders remember that they come from what you set in your [[https://github.com/jeetelongname/dotfiles/blob/master/mail/.mbsyncrc#L31][mail fetcher config]]
#+BEGIN_SRC emacs-lisp
(set-email-account! "gmail"
                    '((mu4e-sent-folder       . "/gmail/\[Gmail\]/Sent Mail")
                      (mu4e-drafts-folder     . "/gmail/\[Gmail\]/Drafts")
                      (mu4e-trash-folder      . "/gmail/\[Gmail\]/Trash")
                      (mu4e-refile-folder     . "/gmail/\[Gmail\]/All Mail")
                      (smtpmail-smtp-user     . "jeetelongname@gmail.com"))t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(after! mu4e
  (setq smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 25))
#+END_SRC


I use msmtp to send my mail as its a little faster and has room for expansion
#+begin_src emacs-lisp
(setq sendmail-program (executable-find "msmtp")
      send-mail-function #'smtpmail-send-it
      message-sendmail-f-is-evil t
      message-sendmail-extra-arguments '("--read-envelope-from")
      message-send-mail-function #'message-send-mail-with-sendmail)
#+end_src

Adding some kebinding under localleader. this should make it a little easier to
do mail stuff. I do like =C-c C-c= to send tho
#+begin_src emacs-lisp
(map! (:map org-msg-edit-mode-map
       :n "<tab>" #'org-msg-tab
       :localleader
       (:prefix "m"
        "k" #'org-msg-edit-kill-buffer
        "s" #'message-goto-subject
        "b" #'org-msg-goto-body
        "a" #'org-msg-attach)))
#+end_src

These are the settings for org-msg I may switch them to a snippet tho as I can
toggle the kind of signature I want to use then
#+BEGIN_SRC emacs-lisp
(after! mu4e
  (setq
   ;; org-msg-default-alternatives '(html)
   org-msg-greeting-fmt "\nHi *%s*,\n\n"
   org-msg-signature "\nRegards,
 ,#+begin_signature
 -- *Jeetaditya Chatterjee* \\\\
 /Sent using my text editor/
 ,#+end_signature"))
#+END_SRC

I update my mail when I feel like it so this is a little redundant for me
#+begin_src emacs-lisp :tangle packages.el
(package! mu4e-alert :disable t)
#+end_src
** App
*** irc
I have a beard and I do like wasting time...
#+begin_src emacs-lisp
(after! circe
  (set-irc-server! "chat.freenode.net"
                   '(:tls t
                     :port 6697
                     :nick "yeetaditya"
                     :sasl-username ,"yeetadita"
                     :sasl-password (+pass-get-secret "social/freenode")
                     :channels ("#emacs"))))
#+end_src
*** rss
I have not used it in months but i will probably revise it some point
#+BEGIN_SRC emacs-lisp
(after! elfeed
  (setq elfeed-search-filter "@1-week-ago")
  (setq rmh-elfeed-org-files (list (concat org-directory "elfeed.org"))) ;; +org
  (add-hook! 'elfeed-search-mode-hook 'elfeed-update))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (use-package! elfeed-goodies
;;   :config
;;   (elfeed-goodies/setup))
#+END_SRC

* Epilogue
And that was my config! I hope you liked it! If you did not then you can make an
[[https://github.com/jeetelongname/.doom/issues][issue]] and if you just want to say I suck then i guess you can use that for that
too. I guess this is it for me... I am going back to bed
